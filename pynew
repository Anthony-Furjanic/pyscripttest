import os
import json
import tkinter as tk
from tkinter import ttk, messagebox
import datetime

ROOT_DIRECTORY = "C:/Users/Antho/FRUIT_FILES"
CHANGE_LOG_FILE = os.path.join(ROOT_DIRECTORY, "change_log.json")

def _write_to_logs(log_entry, fruit_type):
    # Global log
    logs = []
    if os.path.exists(CHANGE_LOG_FILE):
        try:
            with open(CHANGE_LOG_FILE, "r", encoding="utf-8") as f:
                logs = json.load(f)
        except (json.JSONDecodeError, ValueError):
            print(" Warning: global change_log.json was empty or corrupt.")
            logs = []

    logs.insert(0, log_entry)
    with open(CHANGE_LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, indent=4,  ensure_ascii=False)

    # Local log per fruit
    local_log_path = os.path.join(ROOT_DIRECTORY, fruit_type, "change_log.json")
    local_logs = []
    if os.path.exists(local_log_path):
        try:
            with open(local_log_path, "r", encoding="utf-8") as f:
                local_logs = json.load(f)
        except (json.JSONDecodeError, ValueError):
            print(f"⚠ Warning: local {fruit_type}/change_log.json was corrupt.")
            local_logs = []

    local_logs.insert(0, log_entry)
    with open(local_log_path, "w", encoding="utf-8") as f:
        json.dump(local_logs, f, indent=4,  ensure_ascii=False)

def load_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None


def save_replay(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4,  ensure_ascii=False)


def find_fruit_files(date_folder):
    print(f" Scanning for .replay files in: {date_folder}")
    matched_files = []
    for file in os.listdir(date_folder):
        if file.endswith(".replay") and any(name in file.lower() for name in ["fruit", "abc", "steak"]):
            matched_files.append(os.path.join(date_folder, file))
    return matched_files


def entry_exists(data, question, answer, sub):
    for entry in data.get("Fruits", []):
        if entry.get("Sub") == sub:
            for pair in entry.get("QAPairs", []):
                if (
                    pair.get("Question") == question
                    and any(answer in ans for ans in pair.get("Answer", []))
                ):
                    return True
    return False


def process_file_with_duplicates(file_path, question, answer, sub, modified_files, skip_if_duplicate=False):
    data = load_json(file_path)
    if not data or "Fruits" not in data:
        return None

    new_entry = {
        "QAPairs": [
            {"Question": "", "Answer": [".*", ".*"], "clock": 60, "ops": "mathces", "Negative": False},
            {"Question": question, "Answer": [f"I see you {answer}"], "Tim": 60, "Ope": "mathces", "Neg": False}
        ],
        "Sub": sub,
        "dom": "",
        "timot": 300,
        "initb": {}
    }

    # Check for duplicate
    for entry in data.get("Fruits", []):
        if entry.get("Sub") == sub:
            for pair in entry.get("QAPairs", []):
                if (
                    pair.get("Question") == question
                    and any(answer in ans for ans in pair.get("Answer", []))
                ):
                    if skip_if_duplicate:
                        return ("duplicate", file_path, entry)
                    else:
                        break  # Found duplicate, but we're choosing to add anyway

    # Insert new QA entry
    data["Fruits"].insert(0, new_entry)
    save_replay(file_path, data)
    modified_files.append(os.path.basename(file_path))
    return ("added", file_path, new_entry)


def show_duplicate_popup(duplicates):
    import tkinter as tk
    from tkinter import messagebox

    if not duplicates:
        return True

    popup = tk.Toplevel()
    popup.title("Duplicate Found")
    popup.geometry("650x400")
    popup.configure(bg="black")

    tk.Label(popup, text="Duplicate QA entries were found.\nReview the existing entries below.",
             bg="black", fg="white", font=("Arial", 12)).pack(pady=10)

    frame = tk.Frame(popup, bg="black")
    frame.pack(fill=tk.BOTH, expand=True)

    scrollbar = tk.Scrollbar(frame)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    listbox = tk.Listbox(frame, width=90, height=15, bg="black", fg="white", yscrollcommand=scrollbar.set)

    for file_path, entry in duplicates:
        preview = f"{os.path.basename(file_path)} – Sub: {entry['Sub']}"
        for qa in entry["QAPairs"]:
            preview += f" | Q: {qa.get('Question', '')} | A: {', '.join(qa.get('Answer', []))}"
        listbox.insert(tk.END, preview)

    listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.config(command=listbox.yview)

    confirmed = {"proceed": False}

    def confirm():
        confirmed["proceed"] = True
        popup.destroy()

    def cancel():
        confirmed["proceed"] = False
        popup.destroy()

    btn_frame = tk.Frame(popup, bg="black")
    btn_frame.pack(pady=10)

    tk.Button(btn_frame, text="Add Anyway", command=confirm, bg="green", fg="white", width=15).pack(side=tk.LEFT, padx=10)
    tk.Button(btn_frame, text="Cancel", command=cancel, bg="red", fg="white", width=15).pack(side=tk.LEFT, padx=10)

    popup.transient()
    popup.grab_set()
    popup.wait_window()

    return confirmed["proceed"]


def log_add_or_delete(action, fruit_type, date, sub, question, answer, files):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        "timestamp": timestamp,
        "action": action,
        "fruit_type": fruit_type,
        "date": date,
        "sub": sub,
        "question": question,
        "answer": answer,
        "affected_files": list(set(files))
    }

    _write_to_logs(log_entry, fruit_type)


def log_sync(fruit_type, date, source_file, affected_files):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        "timestamp": timestamp,
        "action": "sync",
        "fruit_type": fruit_type,
        "date": date,
        "source_file": source_file,
        "synced_to": list(set(affected_files))
    }

    _write_to_logs(log_entry, fruit_type)



def sync_to_future_dates(fruit_type, selected_date, question, answer, sub, modified_files):
    fruit_path = os.path.join(ROOT_DIRECTORY, fruit_type)
    all_folders = sorted(
        [f for f in os.listdir(fruit_path) if os.path.isdir(os.path.join(fruit_path, f))]
    )
    selected_date = selected_date.replace("-", ".")

    if selected_date in all_folders:
        selected_index = all_folders.index(selected_date)
        future_folders = all_folders[selected_index:]  #  includes current folder
    else:
        messagebox.showerror("Error", f"Selected folder {selected_date} not found.")
        return

    for future_folder in future_folders:
        future_path = os.path.join(fruit_path, future_folder)
        future_files = find_fruit_files(future_path)
        for file_path in future_files:
            process_file_with_duplicates(file_path, question, answer, sub, modified_files)



def add_qa_pair(fruit_type, selected_date, question, answer, sub):
    date_folder = os.path.join(ROOT_DIRECTORY, fruit_type, selected_date)
    if not os.path.exists(date_folder):
        messagebox.showerror("Error", f"Folder {selected_date} does not exist in {fruit_type}.")
        return

    modified_files = []
    file_paths = find_fruit_files(date_folder)

    duplicates = []
    to_add = []

    for file_path in file_paths:
        result = process_file_with_duplicates(file_path, question, answer, sub, modified_files, skip_if_duplicate=True)
        if result:
            status, path, entry = result
            if status == "duplicate":
                duplicates.append((path, entry))
            else:
                to_add.append(path)

    if duplicates:
        proceed = show_duplicate_popup(duplicates)
        if not proceed:
            messagebox.showinfo("Operation Cancelled", "No QA entries were added due to duplicates.")
            return

        # Add anyway to the duplicate files
        for file_path, _ in duplicates:
            process_file_with_duplicates(file_path, question, answer, sub, modified_files, skip_if_duplicate=False)

    sync_to_future_dates(fruit_type, selected_date, question, answer, sub, modified_files)
    log_add_or_delete(
        action="add",
        fruit_type=fruit_type,
        date=selected_date,
        sub=sub,
        question=question,
        answer=answer,
        files=modified_files
    )

    summary = f" QA pair added for:\n- Fruit: {fruit_type}\n- Date: {selected_date}\n\n"
    summary += f"📂 Files modified:\n" + "\n".join(modified_files) if modified_files else "No new files were updated (duplicates skipped)."
    messagebox.showinfo("Summary", summary)


def find_entries_by_sub(fruit_type, selected_date, sub_to_delete):
    fruit_path = os.path.join(ROOT_DIRECTORY, fruit_type)
    all_folders = sorted([f for f in os.listdir(fruit_path) if os.path.isdir(os.path.join(fruit_path, f))])
    selected_date = selected_date.replace("-", ".")

    matching_entries = []
    if selected_date not in all_folders:
        return []

    selected_index = all_folders.index(selected_date)
    folders_to_scan = all_folders[selected_index:]  # Current and future

    for folder in folders_to_scan:
        full_path = os.path.join(fruit_path, folder)
        files = find_fruit_files(full_path)
        for file_path in files:
            data = load_json(file_path)
            if not data or "Fruits" not in data:
                continue
            for entry in data["Fruits"]:
                if entry.get("Sub") == sub_to_delete:
                    matching_entries.append({
                        "file_path": file_path,
                        "file_name": os.path.basename(file_path),
                        "folder": folder,
                        "entry": entry
                    })

    return matching_entries


def delete_selected_entries(matches, selected_indices):
    deleted = {}
    for i in selected_indices:
        match = matches[i]
        file_path = match["file_path"]
        entry = match["entry"]

        data = load_json(file_path)
        if not data or "Fruits" not in data:
            continue

        try:
            data["Fruits"].remove(entry)
            save_replay(file_path, data)
            if file_path not in deleted:
                deleted[file_path] = []
            deleted[file_path].append(entry)
        except ValueError:
            continue
    return deleted


def show_delete_dialog(matches):
    if not matches:
        messagebox.showinfo("No Matches", "No QA entries found with the specified Sub.")
        return

    dialog = tk.Toplevel()
    dialog.title("Confirm Deletions")
    dialog.geometry("700x450")
    dialog.configure(bg="black")

    tk.Label(dialog, text="Select entries to delete:", bg="black", fg="white", font=("Arial", 12)).pack(pady=5)

    frame = tk.Frame(dialog, bg="black")
    frame.pack(fill=tk.BOTH, expand=True)

    scrollbar = tk.Scrollbar(frame)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    listbox = tk.Listbox(frame, selectmode=tk.MULTIPLE, width=100, height=20,
                         bg="black", fg="white", yscrollcommand=scrollbar.set, font=("Courier", 10))
    listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.config(command=listbox.yview)

    # Fill the Listbox with readable preview of Q&A
    for idx, match in enumerate(matches):
        entry = match["entry"]
        preview = f"[{match['folder']}] {match['file_name']} – Sub: {entry['Sub']}"

        qa_preview = []
        for qa in entry.get("QAPairs", []):
            q = qa.get("Question", "")
            a = ", ".join(qa.get("Answer", []))
            qa_preview.append(f"Q: {q} | A: {a}")

        # Either show all pairs or just the first (uncomment whichever you want)
        # summary = " || ".join(qa_preview)             # All Q&A pairs
        summary = qa_preview[1] if len(qa_preview) > 1 else ""
  # Just the first one

        listbox.insert(tk.END, f"{preview} || {summary}")
        listbox.insert(tk.END, "")
    def confirm_deletion():
        selected_indices = listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("No Selection", "Please select entries to delete.")
            return

        deleted = delete_selected_entries(matches, selected_indices)
        if deleted:
            first_match = matches[selected_indices[0]]
            sub = first_match["entry"].get("Sub", "")
            qapairs = first_match["entry"].get("QAPairs", [])
            question = qapairs[-1]["Question"] if qapairs else ""
            answer = qapairs[-1]["Answer"][0] if qapairs and qapairs[-1].get("Answer") else ""
            fruit_type = first_match["file_path"].split(os.sep)[-3]
            selected_date = first_match["folder"]

            log_add_or_delete(
                action="delete",
                fruit_type=fruit_type,
                date=selected_date,
                sub=sub,
                question=question,
                answer=answer,
                files=list(deleted.keys())
            )

        count = sum(len(v) for v in deleted.values())
        summary = f"🗑️ Deleted {count} QA entries from:\n" + "\n".join(os.path.basename(k) for k in deleted.keys())
        messagebox.showinfo("Deletion Complete", summary)
        dialog.destroy()

    tk.Button(dialog, text="Delete Selected", command=confirm_deletion,
              bg="red", fg="white", font=("Arial", 12)).pack(pady=10)



def sync_single_file_forward(fruit_type, selected_date, source_file_path):
    fruit_path = os.path.join(ROOT_DIRECTORY, fruit_type)
    all_folders = sorted([
        f for f in os.listdir(fruit_path)
        if os.path.isdir(os.path.join(fruit_path, f))
    ])
    selected_date = selected_date.replace("-", ".")

    if selected_date not in all_folders:
        messagebox.showerror("Error", f"Folder {selected_date} not found.")
        return

    selected_index = all_folders.index(selected_date)
    target_folders = all_folders[selected_index:]  #  Includes current folder

    # Load Fruits array from source file
    source_data = load_json(source_file_path)
    if not source_data or "Fruits" not in source_data:
        messagebox.showerror("Error", "Selected file does not contain 'Fruits' data.")
        return

    source_fruits = source_data["Fruits"]
    synced_files = []

    for folder in target_folders:
        folder_path = os.path.join(fruit_path, folder)
        replay_files = find_fruit_files(folder_path)

        for file_path in replay_files:
            print(f"🔍 Syncing to: {file_path}")
            data = load_json(file_path)
            if not data:
                continue

            data["Fruits"] = source_fruits
            save_replay(file_path, data)
            synced_files.append(f"📁 {folder} > {os.path.basename(file_path)} ")


    if synced_files:
        summary = f" Synced Fruits array from:\n{os.path.basename(source_file_path)}\n\n Updated files:\n"
        summary += "\n".join(synced_files)
        messagebox.showinfo("Sync Complete", summary)
    else:
        messagebox.showinfo("No Matching Files", "No .replay files were updated.")

    log_sync(fruit_type, selected_date, os.path.basename(source_file_path), synced_files)



def smart_sync_forward_from_date(fruit_type, selected_date):
    fruit_path = os.path.join(ROOT_DIRECTORY, fruit_type)
    all_folders = sorted([f for f in os.listdir(fruit_path) if os.path.isdir(os.path.join(fruit_path, f))])
    selected_date = selected_date.replace("-", ".")

    if selected_date not in all_folders:
        messagebox.showerror("Error", f"Selected folder {selected_date} not found.")
        return

    selected_index = all_folders.index(selected_date)
    source_folder = os.path.join(fruit_path, selected_date)
    source_files = find_fruit_files(source_folder)
    future_folders = all_folders[selected_index + 1:]

    if not source_files:
        messagebox.showinfo("Nothing to Sync", f"No .replay files found in {selected_date}.")
        return

    synced_files = []

    for source_file in source_files:
        source_data = load_json(source_file)
        if not source_data or "Fruits" not in source_data:
            continue

        source_fruits = source_data["Fruits"]
        file_name = os.path.basename(source_file)

        for future_folder in future_folders:
            future_path = os.path.join(fruit_path, future_folder)
            future_file_path = os.path.join(future_path, file_name)

            if not os.path.exists(future_file_path):
                continue

            # Load and replace only the Fruits section
            future_data = load_json(future_file_path)
            if not future_data:
                continue

            future_data["Fruits"] = source_fruits

            save_replay(future_file_path, future_data)
            print(f" Synced: {file_name} → {future_folder}")
            synced_files.append(f"{file_name} → {future_folder}")
    print(f"🔍 Looking for: {future_file_path}")
    if not os.path.exists(future_file_path):
        print(" File not found, skipping.")
    else:
        print(" Found file, applying overwrite.")


# GUI
def build_gui():
    root = tk.Tk()
    root.title("QA Pair Manager")
    root.geometry("600x550")
    root.configure(bg="black")

    large_font = ("Arial", 14)

    tk.Label(root, text="Select Fruit Type (A/B/C):", bg="black", fg="white", font=large_font).pack()
    fruit_types = sorted([f for f in os.listdir(ROOT_DIRECTORY) if os.path.isdir(os.path.join(ROOT_DIRECTORY, f))])
    fruit_type_var = ttk.Combobox(root, values=fruit_types, state="readonly", font=large_font)
    fruit_type_var.pack()

    tk.Label(root, text="Select Date Folder:", bg="black", fg="white", font=large_font).pack()
    date_folder_var = ttk.Combobox(root, values=[], state="readonly", font=large_font)
    date_folder_var.pack()

    def update_date_folders(event):
        selected_fruit = fruit_type_var.get()
        fruit_path = os.path.join(ROOT_DIRECTORY, selected_fruit)
        if os.path.exists(fruit_path):
            dates = sorted([f for f in os.listdir(fruit_path) if os.path.isdir(os.path.join(fruit_path, f))])
            date_folder_var["values"] = dates
            if dates:
                date_folder_var.current(0)

    fruit_type_var.bind("<<ComboboxSelected>>", update_date_folders)

    tk.Label(root, text="Question Field Entry:", bg="black", fg="white", font=large_font).pack()
    question_entry = tk.Entry(root, width=50, bg="black", fg="white", insertbackground="white", font=large_font)
    question_entry.pack()

    tk.Label(root, text="Answer Field Entry:", bg="black", fg="white", font=large_font).pack()
    answer_entry = tk.Entry(root, width=50, bg="black", fg="white", insertbackground="white", font=large_font)
    answer_entry.pack()

    tk.Label(root, text="Enter Sub:", bg="black", fg="white", font=large_font).pack()
    sub_entry = tk.Entry(root, width=50, bg="black", fg="white", insertbackground="white", font=large_font)
    sub_entry.pack()

    def show_sync_file_selector(fruit_type, selected_date):
        folder_path = os.path.join(ROOT_DIRECTORY, fruit_type, selected_date)
        replay_files = find_fruit_files(folder_path)

        if not replay_files:
            messagebox.showinfo("No Files", "No .replay files found in selected folder.")
            return

        dialog = tk.Toplevel()
        dialog.title("Select File to Sync Forward")
        dialog.geometry("600x400")
        dialog.configure(bg="black")

        tk.Label(dialog, text="Select the file you want to sync forward:",
                 bg="black", fg="white", font=("Arial", 12)).pack(pady=10)

        listbox = tk.Listbox(dialog, selectmode=tk.SINGLE, width=80, height=15,
                             bg="black", fg="white", font=("Arial", 11))
        for path in replay_files:
            listbox.insert(tk.END, os.path.basename(path))
        listbox.pack(pady=5)

        def confirm_selection():
            selected_idx = listbox.curselection()
            if not selected_idx:
                messagebox.showwarning("No Selection", "Please select a file to sync.")
                return

            file_name = listbox.get(selected_idx[0])
            source_file_path = os.path.join(folder_path, file_name)
            sync_single_file_forward(fruit_type, selected_date, source_file_path)
            dialog.destroy()

        tk.Button(dialog, text="Sync Selected File", command=confirm_selection,
                  bg="gray20", fg="white", font=("Arial", 12)).pack(pady=10)

    def on_add_click():
        add_button.config(state="disabled")

        fruit = fruit_type_var.get()
        date = date_folder_var.get()
        q = question_entry.get()
        a = answer_entry.get()
        s = sub_entry.get()

        if not (fruit and date and q and a and s):
            messagebox.showerror("Error", "Please fill in all fields and selections.")
            add_button.config(state="normal")
            return

        add_qa_pair(fruit, date, q, a, s)

        question_entry.delete(0, tk.END)
        answer_entry.delete(0, tk.END)
        sub_entry.delete(0, tk.END)

        add_button.config(state="normal")

    def on_delete_click():
        fruit = fruit_type_var.get()
        date = date_folder_var.get()
        sub = sub_entry.get()

        if not (fruit and date and sub):
            messagebox.showerror("Error", "Please select fruit, date, and enter a Sub to delete.")
            return

        matches = find_entries_by_sub(fruit, date, sub)
        show_delete_dialog(matches)


    def on_sync_click():
        fruit = fruit_type_var.get()
        date = date_folder_var.get()

        if not (fruit and date):
            messagebox.showerror("Error", "Please select both fruit and date before syncing.")
            return

        show_sync_file_selector(fruit, date)


    global add_button
    add_button = tk.Button(root, text="Add QA Pair", command=on_add_click, bg="gray20", fg="white", font=large_font)
    add_button.pack(pady=10)

    sync_button = tk.Button(root, text="Sync Forward", command=on_sync_click, bg="gray20", fg="white", font=large_font)
    sync_button.pack(pady=10)

    delete_button = tk.Button(root, text="Delete QA Entry", command=on_delete_click, bg="gray20", fg="white",
                              font=large_font)
    delete_button.pack(pady=10)

    # You can reinsert delete functionality here if needed (omitted for brevity)

    root.mainloop()


# Start GUI
build_gui()




def show_processing_popup(message="Processing..."):
    popup = tk.Toplevel()
    popup.title("Please Wait")
    popup.geometry("300x100")
    popup.configure(bg="black")
    popup.transient()
    popup.grab_set()

    label = tk.Label(popup, text=message, fg="white", bg="black", font=("Arial", 12))
    label.pack(expand=True)

    popup.update_idletasks()
    popup.update()

    return popup

